// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using asistPatentCore.Data;

namespace asistPatentCore.Data.Migrations
{
    [DbContext(typeof(MainContext))]
    [Migration("20201017073441_mgAgreementsRoles")]
    partial class mgAgreementsRoles
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("asistPatentCore.Model.AgreementCounter", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("counter")
                        .HasColumnType("int")
                        .HasMaxLength(8);

                    b.HasKey("id");

                    b.ToTable("agreementCounters");
                });

            modelBuilder.Entity("asistPatentCore.Model.AgreementStatuses", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("category")
                        .HasColumnType("int");

                    b.Property<string>("statusText")
                        .IsRequired()
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("id");

                    b.ToTable("agreementStatuses");
                });

            modelBuilder.Entity("asistPatentCore.Model.Agreements", b =>
                {
                    b.Property<Guid>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<int>("appCategoryType")
                        .HasColumnType("int");

                    b.Property<Guid>("basketId")
                        .HasColumnType("char(36)");

                    b.Property<int>("companyIdForInvoice")
                        .HasColumnType("int");

                    b.Property<int>("generalStatus")
                        .HasColumnType("int");

                    b.Property<int>("groupId")
                        .HasColumnType("int");

                    b.Property<int>("paymentType")
                        .HasColumnType("int");

                    b.Property<DateTime>("processDate")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid>("responsibleUserId")
                        .HasColumnType("char(36)");

                    b.Property<int>("statusId")
                        .HasColumnType("int");

                    b.HasKey("id");

                    b.HasIndex("basketId");

                    b.HasIndex("companyIdForInvoice");

                    b.HasIndex("responsibleUserId");

                    b.HasIndex("statusId");

                    b.ToTable("agreements");
                });

            modelBuilder.Entity("asistPatentCore.Model.AgreementsChanges", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<Guid>("agreementId")
                        .HasColumnType("char(36)");

                    b.Property<string>("comments")
                        .IsRequired()
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int>("generalStatus")
                        .HasColumnType("int");

                    b.Property<DateTime>("processDate")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("status")
                        .HasColumnType("int");

                    b.Property<Guid>("userId")
                        .HasColumnType("char(36)");

                    b.HasKey("id");

                    b.HasIndex("agreementId");

                    b.HasIndex("userId");

                    b.ToTable("agreementsChanges");
                });

            modelBuilder.Entity("asistPatentCore.Model.AgreementsRoles", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("agreementsStatusesId")
                        .HasColumnType("int");

                    b.Property<Guid>("userId")
                        .HasColumnType("char(36)");

                    b.HasKey("id");

                    b.HasIndex("agreementsStatusesId");

                    b.HasIndex("userId");

                    b.ToTable("AgreementsRoles");
                });

            modelBuilder.Entity("asistPatentCore.Model.ApplicationClass", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("appclassname")
                        .IsRequired()
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4")
                        .HasMaxLength(255);

                    b.Property<int>("appclassnumber")
                        .HasColumnType("int");

                    b.HasKey("id");

                    b.ToTable("applicationClasses");
                });

            modelBuilder.Entity("asistPatentCore.Model.ApplicationEmtiaClass", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("appSubClassId")
                        .HasColumnType("int");

                    b.Property<int>("status")
                        .HasColumnType("int");

                    b.Property<string>("value")
                        .IsRequired()
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("id");

                    b.HasIndex("appSubClassId");

                    b.ToTable("applicationEmtiaClasses");
                });

            modelBuilder.Entity("asistPatentCore.Model.ApplicationSubClass", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("appclassId")
                        .HasColumnType("int");

                    b.Property<int>("status")
                        .HasColumnType("int");

                    b.Property<string>("subclasscode")
                        .IsRequired()
                        .HasColumnType("varchar(25) CHARACTER SET utf8mb4")
                        .HasMaxLength(25);

                    b.Property<string>("subclassname")
                        .IsRequired()
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("id");

                    b.HasIndex("appclassId");

                    b.ToTable("applicationSubClasses");
                });

            modelBuilder.Entity("asistPatentCore.Model.AuthorizedUsers", b =>
                {
                    b.Property<Guid>("authId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<int>("status")
                        .HasColumnType("int");

                    b.Property<DateTime>("userCreateDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("userEmailAdress")
                        .IsRequired()
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<Guid>("userId")
                        .HasColumnType("char(36)");

                    b.Property<string>("userName")
                        .IsRequired()
                        .HasColumnType("varchar(100) CHARACTER SET utf8mb4")
                        .HasMaxLength(100);

                    b.Property<string>("userPhoneNumber")
                        .IsRequired()
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("userSurname")
                        .IsRequired()
                        .HasColumnType("varchar(100) CHARACTER SET utf8mb4")
                        .HasMaxLength(100);

                    b.HasKey("authId");

                    b.HasIndex("userId");

                    b.ToTable("authorizedUsers");
                });

            modelBuilder.Entity("asistPatentCore.Model.BankAccounts", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("accountCurrencyType")
                        .HasColumnType("int");

                    b.Property<int>("accountNumber")
                        .HasColumnType("int")
                        .HasMaxLength(255);

                    b.Property<string>("bankName")
                        .IsRequired()
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4")
                        .HasMaxLength(255);

                    b.Property<int>("brunchCode")
                        .HasColumnType("int")
                        .HasMaxLength(50);

                    b.Property<string>("brunchName")
                        .IsRequired()
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4")
                        .HasMaxLength(255);

                    b.Property<string>("ibanNo")
                        .IsRequired()
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int>("status")
                        .HasColumnType("int");

                    b.HasKey("id");

                    b.ToTable("bankAccounts");
                });

            modelBuilder.Entity("asistPatentCore.Model.Basket", b =>
                {
                    b.Property<Guid>("basketId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<int>("appCategoryType")
                        .HasColumnType("int");

                    b.Property<int>("appType")
                        .HasColumnType("int");

                    b.Property<int>("basketGroupId")
                        .HasColumnType("int");

                    b.Property<int>("basketStatus")
                        .HasColumnType("int");

                    b.Property<int>("brandAppTypeId")
                        .HasColumnType("int");

                    b.Property<string>("brandName")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4")
                        .HasMaxLength(255);

                    b.Property<DateTime>("createDateTime")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("explation")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4")
                        .HasMaxLength(255);

                    b.Property<double>("priceWithoutTax")
                        .HasColumnType("double");

                    b.Property<double>("totalPrice")
                        .HasColumnType("double");

                    b.Property<Guid>("userId")
                        .HasColumnType("char(36)");

                    b.HasKey("basketId");

                    b.HasIndex("brandAppTypeId");

                    b.HasIndex("userId");

                    b.ToTable("baskets");
                });

            modelBuilder.Entity("asistPatentCore.Model.BasketClass", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("additionalValue")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int>("appClassId")
                        .HasColumnType("int");

                    b.Property<string>("basketClassName")
                        .IsRequired()
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<Guid>("basketId")
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("createDate")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("status")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("appClassId");

                    b.HasIndex("basketId");

                    b.ToTable("basketClass");
                });

            modelBuilder.Entity("asistPatentCore.Model.BasketCompany", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("basketCompanyId")
                        .HasColumnType("int");

                    b.Property<Guid>("basketId")
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("createDate")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("status")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("basketCompanyId");

                    b.HasIndex("basketId");

                    b.ToTable("basketCompanies");
                });

            modelBuilder.Entity("asistPatentCore.Model.BasketFiles", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<Guid>("basketId")
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("createDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("filename")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int>("status")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("basketId");

                    b.ToTable("basketFiles");
                });

            modelBuilder.Entity("asistPatentCore.Model.BasketSubClass", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("appSubClassId")
                        .HasColumnType("int");

                    b.Property<Guid>("basketId")
                        .HasColumnType("char(36)");

                    b.Property<string>("basketSubClassName")
                        .IsRequired()
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<DateTime>("createDate")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("status")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("appSubClassId");

                    b.HasIndex("basketId");

                    b.ToTable("basketSubClasses");
                });

            modelBuilder.Entity("asistPatentCore.Model.BrandApplicationPrices", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<double>("branch")
                        .HasColumnType("double");

                    b.Property<int>("brandAppTypeId")
                        .HasColumnType("int");

                    b.Property<double>("extraClassService")
                        .HasColumnType("double");

                    b.Property<double>("service")
                        .HasColumnType("double");

                    b.Property<double>("tuition")
                        .HasColumnType("double");

                    b.Property<DateTime>("userCreateDate")
                        .HasColumnType("datetime(6)");

                    b.HasKey("id");

                    b.HasIndex("brandAppTypeId");

                    b.ToTable("brandApplicationPrices");
                });

            modelBuilder.Entity("asistPatentCore.Model.BrandApplicationTypes", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("applicationType")
                        .HasColumnType("int");

                    b.Property<int>("categoryType")
                        .HasColumnType("int");

                    b.Property<string>("code")
                        .IsRequired()
                        .HasColumnType("varchar(10) CHARACTER SET utf8mb4")
                        .HasMaxLength(10);

                    b.Property<string>("name")
                        .IsRequired()
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<DateTime>("userCreateDate")
                        .HasColumnType("datetime(6)")
                        .HasMaxLength(255);

                    b.HasKey("id");

                    b.ToTable("brandApplicationTypes");
                });

            modelBuilder.Entity("asistPatentCore.Model.BrandApplicationVisibilty", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<bool>("applicationClassStatus")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("brandApplicationTypesId")
                        .HasColumnType("int");

                    b.Property<bool>("brandExplanationStatus")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("brandNameStatus")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("brandTitleChangeStatus")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("brandUploadStatus")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("companiesListStatus")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime>("userCreateDate")
                        .HasColumnType("datetime(6)");

                    b.HasKey("id");

                    b.HasIndex("brandApplicationTypesId");

                    b.ToTable("brandApplicationVisiblities");
                });

            modelBuilder.Entity("asistPatentCore.Model.Companies", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("adress")
                        .IsRequired()
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("companyTitle")
                        .IsRequired()
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int>("companyType")
                        .HasColumnType("int");

                    b.Property<string>("taxCenter")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4")
                        .HasMaxLength(255);

                    b.Property<int>("taxNumber")
                        .HasColumnType("int");

                    b.Property<Guid?>("userId")
                        .HasColumnType("char(36)");

                    b.HasKey("id");

                    b.HasIndex("userId");

                    b.ToTable("companies");
                });

            modelBuilder.Entity("asistPatentCore.Model.DefaultValues", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("key")
                        .IsRequired()
                        .HasColumnType("varchar(100) CHARACTER SET utf8mb4")
                        .HasMaxLength(100);

                    b.Property<string>("keyTurkishText")
                        .IsRequired()
                        .HasColumnType("varchar(100) CHARACTER SET utf8mb4")
                        .HasMaxLength(100);

                    b.Property<int>("status")
                        .HasColumnType("int");

                    b.Property<string>("value")
                        .IsRequired()
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("id");

                    b.ToTable("defaultValues");
                });

            modelBuilder.Entity("asistPatentCore.Model.MailSources", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("displayName")
                        .IsRequired()
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4")
                        .HasMaxLength(255);

                    b.Property<bool>("enableSsl")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("password")
                        .IsRequired()
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4")
                        .HasMaxLength(255);

                    b.Property<int>("port")
                        .HasColumnType("int");

                    b.Property<string>("smtpServer")
                        .IsRequired()
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4")
                        .HasMaxLength(255);

                    b.Property<string>("username")
                        .IsRequired()
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4")
                        .HasMaxLength(255);

                    b.HasKey("id");

                    b.ToTable("mailSources");
                });

            modelBuilder.Entity("asistPatentCore.Model.MailTemplates", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("mailContent")
                        .IsRequired()
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("mailHeader")
                        .IsRequired()
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int>("sourceId")
                        .HasColumnType("int");

                    b.Property<int>("template")
                        .HasColumnType("int");

                    b.HasKey("id");

                    b.HasIndex("sourceId");

                    b.ToTable("mailTemplates");
                });

            modelBuilder.Entity("asistPatentCore.Model.Users", b =>
                {
                    b.Property<Guid>("userId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<bool>("isBranch")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("role")
                        .HasColumnType("int");

                    b.Property<int>("status")
                        .HasColumnType("int");

                    b.Property<DateTime>("userCreateDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("userEmailAdress")
                        .IsRequired()
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4")
                        .HasMaxLength(255);

                    b.Property<string>("userName")
                        .HasColumnType("varchar(120) CHARACTER SET utf8mb4")
                        .HasMaxLength(120);

                    b.Property<string>("userPassword")
                        .HasColumnType("varchar(24) CHARACTER SET utf8mb4")
                        .HasMaxLength(24);

                    b.Property<string>("userPhoneNumber")
                        .HasColumnType("varchar(11) CHARACTER SET utf8mb4")
                        .HasMaxLength(11);

                    b.Property<string>("userSurname")
                        .HasColumnType("varchar(120) CHARACTER SET utf8mb4")
                        .HasMaxLength(120);

                    b.HasKey("userId");

                    b.ToTable("users");
                });

            modelBuilder.Entity("asistPatentCore.Model.UsersToken", b =>
                {
                    b.Property<Guid>("tokenId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("createDate")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("status")
                        .HasColumnType("int");

                    b.Property<int>("type")
                        .HasColumnType("int");

                    b.Property<Guid>("userId")
                        .HasColumnType("char(36)");

                    b.HasKey("tokenId");

                    b.HasIndex("userId");

                    b.ToTable("usersTokens");
                });

            modelBuilder.Entity("asistPatentCore.Model.Agreements", b =>
                {
                    b.HasOne("asistPatentCore.Model.Basket", "basket")
                        .WithMany("AgreementsBasketRelation")
                        .HasForeignKey("basketId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("asistPatentCore.Model.Companies", "Companies")
                        .WithMany("AgreementsCompanyRelation")
                        .HasForeignKey("companyIdForInvoice")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("asistPatentCore.Model.Users", "Users")
                        .WithMany("UsersResponsibleRelation")
                        .HasForeignKey("responsibleUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("asistPatentCore.Model.AgreementStatuses", "AgreementStatuses")
                        .WithMany("AgreementsStatusesRelation")
                        .HasForeignKey("statusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("asistPatentCore.Model.AgreementsChanges", b =>
                {
                    b.HasOne("asistPatentCore.Model.Agreements", "Agreements")
                        .WithMany("AgreementsAgreementsChangesRelation")
                        .HasForeignKey("agreementId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("asistPatentCore.Model.Users", "Users")
                        .WithMany("UsersAgreementsChangesRelation")
                        .HasForeignKey("userId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("asistPatentCore.Model.AgreementsRoles", b =>
                {
                    b.HasOne("asistPatentCore.Model.AgreementStatuses", "AgreementStatuses")
                        .WithMany("AgreementsRolesRelation")
                        .HasForeignKey("agreementsStatusesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("asistPatentCore.Model.Users", "Users")
                        .WithMany("UsersAgreementsRolesRelation")
                        .HasForeignKey("userId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("asistPatentCore.Model.ApplicationEmtiaClass", b =>
                {
                    b.HasOne("asistPatentCore.Model.ApplicationSubClass", "ApplicationSubClass")
                        .WithMany("ApplicationEmtiaClassesList")
                        .HasForeignKey("appSubClassId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("asistPatentCore.Model.ApplicationSubClass", b =>
                {
                    b.HasOne("asistPatentCore.Model.ApplicationClass", "ApplicationClass")
                        .WithMany("ApplicationSubClassesList")
                        .HasForeignKey("appclassId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("asistPatentCore.Model.AuthorizedUsers", b =>
                {
                    b.HasOne("asistPatentCore.Model.Users", "Users")
                        .WithMany("UsersAuthorizedRelation")
                        .HasForeignKey("userId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("asistPatentCore.Model.Basket", b =>
                {
                    b.HasOne("asistPatentCore.Model.BrandApplicationTypes", "BrandApplicationTypes")
                        .WithMany("brandApplicationBasketList")
                        .HasForeignKey("brandAppTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("asistPatentCore.Model.Users", "Users")
                        .WithMany("BasketRelation")
                        .HasForeignKey("userId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("asistPatentCore.Model.BasketClass", b =>
                {
                    b.HasOne("asistPatentCore.Model.ApplicationClass", "ApplicationClass")
                        .WithMany("BasketClassesList")
                        .HasForeignKey("appClassId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("asistPatentCore.Model.Basket", "Basket")
                        .WithMany("BasketClassBasketRelation")
                        .HasForeignKey("basketId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("asistPatentCore.Model.BasketCompany", b =>
                {
                    b.HasOne("asistPatentCore.Model.Companies", "Companies")
                        .WithMany("BasketCompanyRelation")
                        .HasForeignKey("basketCompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("asistPatentCore.Model.Basket", "Basket")
                        .WithMany("BasketCompanyCompanyRelation")
                        .HasForeignKey("basketId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("asistPatentCore.Model.BasketFiles", b =>
                {
                    b.HasOne("asistPatentCore.Model.Basket", "Basket")
                        .WithMany("BasketFilesBasketRelation")
                        .HasForeignKey("basketId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("asistPatentCore.Model.BasketSubClass", b =>
                {
                    b.HasOne("asistPatentCore.Model.ApplicationSubClass", "ApplicationSubClass")
                        .WithMany("BasketSubClassRelation")
                        .HasForeignKey("appSubClassId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("asistPatentCore.Model.Basket", "Basket")
                        .WithMany("BasketSubClassBasketRelation")
                        .HasForeignKey("basketId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("asistPatentCore.Model.BrandApplicationPrices", b =>
                {
                    b.HasOne("asistPatentCore.Model.BrandApplicationTypes", "BrandApplicationTypes")
                        .WithMany("BrandApplicationPricesRelation")
                        .HasForeignKey("brandAppTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("asistPatentCore.Model.BrandApplicationVisibilty", b =>
                {
                    b.HasOne("asistPatentCore.Model.BrandApplicationTypes", "BrandApplicationTypes")
                        .WithMany("brandApplicationVisibilityList")
                        .HasForeignKey("brandApplicationTypesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("asistPatentCore.Model.Companies", b =>
                {
                    b.HasOne("asistPatentCore.Model.Users", "Users")
                        .WithMany("CompanyRelation")
                        .HasForeignKey("userId");
                });

            modelBuilder.Entity("asistPatentCore.Model.MailTemplates", b =>
                {
                    b.HasOne("asistPatentCore.Model.MailSources", "MailSources")
                        .WithMany("MailTemplatesRelation")
                        .HasForeignKey("sourceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("asistPatentCore.Model.UsersToken", b =>
                {
                    b.HasOne("asistPatentCore.Model.Users", "Users")
                        .WithMany("UsersTokenRelation")
                        .HasForeignKey("userId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
